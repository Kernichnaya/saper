import unittest
from contextlib import contextmanager
from tkinter import Tk, Button, Label, Entry
from main import MineSweeper, MyButton
from io import StringIO
import sys

class MockEvent:
    def __init__(self, widget):
        self.widget = widget

class TestMineSweeper(unittest.TestCase):

    def setUp(self):
        self.mine_sweeper = MineSweeper()
        self.window = Tk()

    def tearDown(self):
        self.window.destroy()

    def test_create_widgets(self):
        self.mine_sweeper.create_widgets()
        buttons = self.mine_sweeper.buttons

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
        self.assertIsInstance(buttons, list)
        self.assertEqual(len(buttons), MineSweeper.ROW + 2)
        self.assertIsInstance(buttons[0][0], MyButton)
        self.assertIsInstance(buttons[MineSweeper.ROW + 1][MineSweeper.COLUMNS + 1], MyButton)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–π—Å—Ç–≤ –∫–Ω–æ–ø–æ–∫
        button_number = 1
        for i in range(1, MineSweeper.ROW + 1):
            for j in range(1, MineSweeper.COLUMNS + 1):
                button = buttons[i][j]
                self.assertEqual(button.x, i)
                self.assertEqual(button.y, j)
                self.assertEqual(button.number, button_number)
                self.assertFalse(button.is_mine)
                self.assertFalse(button.is_open)
                self.assertEqual(button.cget('state'), 'normal')
                button_number += 1

    def test_insert_mines(self):
        number = 1
        self.mine_sweeper.create_widgets()
        self.mine_sweeper.insert_mines(number)
        buttons = self.mine_sweeper.buttons

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –º–∏–Ω
        count_mines = 0
        for i in range(1, MineSweeper.ROW + 1):
            for j in range(1, MineSweeper.COLUMNS + 1):
                button = buttons[i][j]
                if button.is_mine:
                    count_mines += 1

        self.assertEqual(count_mines, MineSweeper.MINES)

    def test_count_mines_in_buttons(self):
        self.mine_sweeper.create_widgets()
        self.mine_sweeper.insert_mines(1)
        self.mine_sweeper.count_mines_in_buttons()
        buttons = self.mine_sweeper.buttons

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Å—á—ë—Ç–∞ –º–∏–Ω –≤ —Å–æ—Å–µ–¥–Ω–∏—Ö –∫–Ω–æ–ø–∫–∞—Ö
        for i in range(1, MineSweeper.ROW + 1):
            for j in range(1, MineSweeper.COLUMNS + 1):
                button = buttons[i][j]
                if button.is_mine:
                    self.assertEqual(button.count_bomb, 0)
                else:
                    count_bomb = 0
                    for row_dx in [-1, 0, 1]:
                        for col_dx in [-1, 0, 1]:
                            neighbour = buttons[i + row_dx][j + col_dx]
                            if neighbour.is_mine:
                                count_bomb += 1
                    self.assertEqual(button.count_bomb, count_bomb)

    def test_print_buttons(self):
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç StringIO –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –≤—ã–≤–æ–¥–∞

        # –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç `print`
        self.mine_sweeper.create_widgets()
        self.mine_sweeper.insert_mines(1)

        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–≤–æ–¥ –≤ –æ–±—ä–µ–∫—Ç StringIO
        # –≤–º–µ—Å—Ç–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ stdout
        # –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –ø–µ—Ä–µ—Ö–≤–∞—Ç–∏—Ç—å –≤—ã–≤–æ–¥ `print`
        output = StringIO()

        sys.stdout = output
        self.mine_sweeper.print_buttons()

        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞ –∏–∑ –æ–±—ä–µ–∫—Ç–∞ StringIO
        printed_output = output.getvalue()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–≤–æ–¥ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é
        expected_output = ''
        for i in range(1, self.mine_sweeper.ROW + 1):
            for j in range(1, self.mine_sweeper.COLUMNS + 1):
                btn = self.mine_sweeper.buttons[i][j]
                if btn.is_mine:
                    expected_output += 'B'
                else:
                    expected_output += '0'
            expected_output += '\n'

        self.assertEqual(printed_output, expected_output)

        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ—Ç–æ–∫ –≤—ã–≤–æ–¥–∞
        sys.stdout = sys.__stdout__

    @contextmanager
    def captured_output(self):
        """–ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤—ã–≤–æ–¥."""
        captured = StringIO()
        original_stdout = sys.stdout
        sys.stdout = captured
        try:
            yield captured
        finally:
            sys.stdout = original_stdout

    def test_print_buttons(self):
        self.mine_sweeper.create_widgets()
        self.mine_sweeper.insert_mines(1)

        with self.captured_output() as captured:
            self.mine_sweeper.print_buttons()

        printed_output = captured.getvalue()

        expected_output = ''
        for i in range(1, self.mine_sweeper.ROW + 1):
            for j in range(1, self.mine_sweeper.COLUMNS + 1):
                btn = self.mine_sweeper.buttons[i][j]
                if btn.is_mine:
                    expected_output += 'B'
                else:
                    expected_output += '0'
            expected_output += '\n'

        self.assertEqual(printed_output, expected_output)

    def test_open_all_buttons(self):
        self.mine_sweeper.create_widgets()
        self.mine_sweeper.insert_mines(1)
        self.mine_sweeper.open_all_buttons()

        for i in range(self.mine_sweeper.ROW + 2):
            for j in range(self.mine_sweeper.COLUMNS + 2):
                btn = self.mine_sweeper.buttons[i][j]
                if btn.is_mine:

                    self.assertEqual(btn['text'], "*")
                    self.assertEqual(btn['disabledforeground'], "black")
                    self.assertEqual(btn['background'], "red")

                    #btn.config(text="*", background='red', disabledforeground='black')
                # elif btn.count_bomb in colors:
                elif btn['text']:
                    self.assertEqual(btn['text'], btn.count_bomb)
                    # color = colors.get(btn.count_bomb, 'black')
                    # btn.config(text=btn.count_bomb, fg=color)

    def test_change_settings(self):
        # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.mine_sweeper.create_settings_win()

        # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        settings_win = self.mine_sweeper.window.winfo_children()[-1]
        # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∏–¥–∂–µ—Ç—ã –≤ –æ–∫–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        row_entry = settings_win.winfo_children()[1]
        column_entry = settings_win.winfo_children()[3]
        mines_entry = settings_win.winfo_children()[5]
        save_btn = settings_win.winfo_children()[-1]

        # –í–≤–æ–¥–∏–º –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –≤–∏–¥–∂–µ—Ç—ã
        row_entry.delete(0, 'end')
        row_entry.insert(0, '8')
        column_entry.delete(0, 'end')
        column_entry.insert(0, '12')
        mines_entry.delete(0, 'end')
        mines_entry.insert(0, '15')

        # –ú–æ–¥–µ–ª–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–∏–º–µ–Ω–∏—Ç—å"
        save_btn.invoke()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
        self.assertEqual(self.mine_sweeper.ROW, 8)
        self.assertEqual(self.mine_sweeper.COLUMNS, 12)
        self.assertEqual(self.mine_sweeper.MINES, 15)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–æ–≤–æ–µ –æ–∫–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å
        self.assertTrue(isinstance(self.mine_sweeper.window, Tk))

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–ª–∞–≥ IS_FIRST_CLICK —Å–±—Ä–æ—à–µ–Ω
        self.assertTrue(self.mine_sweeper.IS_FIRST_CLICK)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–ª–∞–≥ IS_GAME_OVER —Å–±—Ä–æ—à–µ–Ω
        self.assertFalse(self.mine_sweeper.IS_GAME_OVER)


    def test_rigth_click_disable_button(self):
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É
        button = self.mine_sweeper.buttons[0][0]
        button.state = 'normal'

        # –ú–æ–¥–µ–ª–∏—Ä—É–µ–º –ø—Ä–∞–≤—ã–π –∫–ª–∏–∫ –Ω–∞ –∫–Ω–æ–ø–∫–µ
        event = MockEvent(widget=button)
        # print(333333333333333, event.widget['state'])
        self.mine_sweeper.rigth_click(event)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ "disabled"
        self.assertEqual(button['state'], 'disabled')
        self.assertEqual(button['text'], 'üö©')


    def test_reload_reset_game_state(self):

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Ñ–ª–∞–≥–æ–≤
        self.mine_sweeper.buttons[0][0].config(state='disabled', text='üö©')
        self.mine_sweeper.buttons[0][1].config(state='normal', text='1')

        # –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ reload
        self.mine_sweeper.reload()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —Å–±—Ä–æ—à–µ–Ω–æ
        self.assertEqual(self.mine_sweeper.buttons[0][0]['state'], 'normal')
        self.assertEqual(self.mine_sweeper.buttons[0][0]['text'], '')
        self.assertEqual(self.mine_sweeper.buttons[0][1]['state'], 'normal')
        self.assertEqual(self.mine_sweeper.buttons[0][1]['text'], '')

    def test_create_settings_win(self):
        # –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
        self.mine_sweeper.window = Tk()

        # –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ create_settings_win
        self.mine_sweeper.create_settings_win()

        # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        settings_win = self.mine_sweeper.window.winfo_children()[0]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –æ–∫–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.assertEqual(settings_win.wm_title(), '–ù–∞—Å—Ç—Ä–æ–π–∫–∏')
        self.assertEqual(len(settings_win.winfo_children()), 7)
        self.assertIsInstance(settings_win.winfo_children()[0], Label)
        self.assertIsInstance(settings_win.winfo_children()[1], Entry)
        self.assertIsInstance(settings_win.winfo_children()[2], Label)
        self.assertIsInstance(settings_win.winfo_children()[3], Entry)
        self.assertIsInstance(settings_win.winfo_children()[4], Label)
        self.assertIsInstance(settings_win.winfo_children()[5], Entry)

    def test_get_mines_places(self):

        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω —Ä–∞–≤–Ω–æ 1
        MineSweeper.MINES = 1
        self.mine_sweeper.insert_mines(1)
        indexes = self.mine_sweeper.get_mines_places(1)
        self.assertEqual(len(indexes), 1)
        self.assertNotIn(1, indexes)

        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω —Ä–∞–≤–Ω–æ 10
        MineSweeper.MINES = 10
        indexes = self.mine_sweeper.get_mines_places(10)
        self.assertEqual(len(indexes), 10)
        self.assertNotIn(1, indexes)
        self.assertNotIn(2, indexes)
        # –î—Ä—É–≥–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –Ω–æ–º–µ—Ä–æ–≤ –∫–Ω–æ–ø–æ–∫ –≤ —Å–ø–∏—Å–∫–µ indexes


if __name__ == '__main__':
    unittest.main()
